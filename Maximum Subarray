#Solution 1 - O(n^3) will give TLE
class Solution {
    public int maxSubArray(int[] nums) {
        int ans = Integer.MIN_VALUE;
        for(int i = 0 ; i < nums.length ; i++) {
            for(int j = i ; j< nums.length ; j++) {
                int sum = getSum(i,j,nums);
                if(sum > ans) {
                    ans = sum;
                }
            }
        }
        return ans;
    }
    
    int getSum(int i, int j, int[] nums) {
        int sum = 0;
        if(i==j) {
            return nums[i];
        } else {
            for(int k = i ; k <= j ; k++) {
                sum += nums[k];
            }
        }
            return sum;
    }   
}


#Solution 2 - Accepted and O(n^2) 

class Solution {
    public int maxSubArray(int[] nums) {
        int ans = Integer.MIN_VALUE;
        for(int i = 0 ; i < nums.length ; i++) { 
            int sum = 0;
            for(int j = i; j < nums.length ; j++) {
                sum = sum + nums[j];
                if(sum > ans) {
                    ans = sum;
                }
            }
        }
        return ans;
    }
}

#Solution 3 - O(n) Kadane's Algo
